package com.example.yearmatch.screen

import androidx.compose.animation.core.animateDpAsState
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.rounded.Menu
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import sh.calvin.reorderable.rememberReorderableLazyListState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import sh.calvin.reorderable.ReorderableItem

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PolandQuizScreen(
    navHostController: NavHostController
) {
    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Text(
                        text = "üáµüá±",
                        fontSize = 20.sp
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navHostController.popBackStack() }) {
                        Icon(imageVector = Icons.Default.ArrowBack, contentDescription = "Êàª„Çã")
                    }
                }
            )
        },
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(16.dp),
            horizontalAlignment = Alignment.Start
        ) {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                contentAlignment = Alignment.TopCenter
            ) {
                Text(
                    text = "Âõ∫ÂÆö„ÅÆÂπ¥Âè∑„Å´ÂØæ„Åó„Å¶\n" +
                            "Ê≠¥Âè≤ÁöÑ‰∫ãÊÉÖ„Çí„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Åß‰∏ÄËá¥„Åï„Åõ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                    fontSize = 12.sp
                )
            }

            val years = listOf(
                966,    // „Éù„Éº„É©„É≥„Éâ„ÅÆ„Ç≠„É™„Çπ„ÉàÊïôÂåñÔºà„É°„Ç∑„É•„Ç≥1‰∏ñ„ÅÆÊ¥óÁ§ºÔºâ
                1025,   // „Éú„É¨„Çπ„ÉØ„Éï1‰∏ñ„ÅÆÂç≥‰ΩçÔºö„Éù„Éº„É©„É≥„ÉâÁéãÂõΩ„ÅÆË™ïÁîü
                1138,   // „Éî„É£„Çπ„ÉàÊúù„ÅÆÂàÜÂâ≤Ôºö„Éù„Éº„É©„É≥„ÉâÁéãÂõΩ„ÅÆÂàÜË£Ç
                1226,   // „ÉÜ„É≥„Éó„É´È®éÂ£´Âõ£„Å´„Çà„Çã„Éù„É¢„Éº„Ç∏„ÇßÔºà„Éù„Éº„É©„É≥„ÉâÂåóÈÉ®Ôºâ„ÅÆÊîØÈÖçÈñãÂßã
                1364,   // „É§„Ç≤„Ç¶„Ç©Â§ßÂ≠¶Ôºà„ÇØ„É©„ÇØ„ÉïÂ§ßÂ≠¶ÔºâÂâµÁ´ã
                1410,   // „Ç∞„É´„É≥„É¥„Ç°„É´„Éà„ÅÆÊà¶„ÅÑÔºà„Çø„Çø„Éº„É´‰∫∫„Å®„Éâ„Ç§„ÉÑÈ®éÂ£´Âõ£„Å®„ÅÆÊà¶„ÅÑÔºâ
                1569,   // „É´„Éñ„É™„É≥ÈÄ£ÂêàÔºö„Éù„Éº„É©„É≥„Éâ„Å®„É™„Éà„Ç¢„Éã„Ç¢„ÅÆÈÄ£ÈÇ¶ÂåñÔºà„Éù„Éº„É©„É≥„Éâ„Éª„É™„Éà„Ç¢„Éã„Ç¢ÂÖ±ÂíåÂõΩÔºâ
                1596,   // „Éñ„É¨„Çπ„Éà„Éª„É™„Éà„Éï„Çπ„ÇØÂÖ¨‰ºöË≠∞Ôºà„Ç´„Éà„É™„ÉÉ„ÇØ„Å®Êù±ÊñπÊïô‰ºö„ÅÆÁµ±ÂêàÔºâ
                1648,   // „Éè„Éà„Éû„É≥„ÅÆÂèç‰π±Ôºö„Ç≥„Çµ„ÉÉ„ÇØ„ÅÆÂèç‰π±Ôºà„Ç¶„ÇØ„É©„Ç§„Éä„Å®„ÅÆÊà¶‰∫âÔºâ
                1683,   // „Ç¶„Ç£„Éº„É≥ÂåÖÂõ≤Êà¶Ôºö„Éù„Éº„É©„É≥„Éâ„ÅÆ„É§„É≥3‰∏ñ„ÇΩ„Éì„Ç®„Çπ„Ç≠„Åå„Ç™„Çπ„Éû„É≥Â∏ùÂõΩ„ÇíÊíÉÈÄÄ
                1772,   // Á¨¨1Ê¨°„Éù„Éº„É©„É≥„ÉâÂàÜÂâ≤Ôºö„É≠„Ç∑„Ç¢„Éª„Éó„É≠„Ç§„Çª„É≥„Éª„Ç™„Éº„Çπ„Éà„É™„Ç¢„Å´„Çà„ÇãÈ†òÂúüÂàÜÂâ≤
                1791,   // „Éù„Éº„É©„É≥„ÉâÊÜ≤Ê≥ï„ÅÆÂà∂ÂÆöÔºà‰∏ñÁïåÂàù„ÅÆËøë‰ª£ÊÜ≤Ê≥ï„ÅÆ‰∏Ä„Å§Ôºâ
                1795,   // Á¨¨3Ê¨°„Éù„Éº„É©„É≥„ÉâÂàÜÂâ≤Ôºö„Éù„Éº„É©„É≥„ÉâÁéãÂõΩÊ∂àÊªÖ„ÄÅ„É≠„Ç∑„Ç¢„Éª„Éó„É≠„Ç§„Çª„É≥„Éª„Ç™„Éº„Çπ„Éà„É™„Ç¢„Å´„Çà„ÇãÂÆåÂÖ®ÊîØÈÖç
                1918,   // Á¨¨1Ê¨°‰∏ñÁïåÂ§ßÊà¶Âæå„ÄÅ„Éù„Éº„É©„É≥„ÉâÂÜçÂª∫Ôºö„Éù„Éº„É©„É≥„ÉâÂÖ±ÂíåÂõΩÁã¨Á´ãÂõûÂæ©
                1980,   // "ÈÄ£Â∏Ø"ÔºàSolidarno≈õƒáÔºâÈÅãÂãïÈñãÂßãÔºöÂèç„ÇΩÈÄ£„ÉªÂèçÂÖ±Áî£‰∏ªÁæ©ÈÅãÂãï
            )

            // **ÂàùÊúüÂåñÊôÇ„Å´„Ç∑„É£„ÉÉ„Éï„É´**
            var events by remember {
                mutableStateOf(
                    listOf(
                        "„É°„Ç∑„É•„Ç≥1‰∏ñ„ÅÆÊ¥óÁ§º",
                        "„Éú„É¨„Çπ„ÉØ„Éï1‰∏ñ„ÅÆÂç≥‰Ωç",
                        "„Éî„É£„Çπ„ÉàÊúù„ÅÆÂàÜÂâ≤",
                        "„ÉÜ„É≥„Éó„É´È®éÂ£´Âõ£„Å´„Çà„ÇãÊîØÈÖçÈñãÂßã",
                        "„É§„Ç≤„Ç¶„Ç©Â§ßÂ≠¶ÂâµÁ´ã",
                        "„Ç∞„É´„É≥„É¥„Ç°„É´„Éà„ÅÆÊà¶„ÅÑ",
                        "„É´„Éñ„É™„É≥ÈÄ£Âêà",
                        "„Éñ„É¨„Çπ„Éà„Éª„É™„Éà„Éï„Çπ„ÇØÂÖ¨‰ºöË≠∞",
                        "„Éè„Éà„Éû„É≥„ÅÆÂèç‰π±",
                        "„Ç¶„Ç£„Éº„É≥ÂåÖÂõ≤Êà¶",
                        "Á¨¨1Ê¨°„Éù„Éº„É©„É≥„ÉâÂàÜÂâ≤",
                        "„Éù„Éº„É©„É≥„ÉâÊÜ≤Ê≥ï„ÅÆÂà∂ÂÆö",
                        "Á¨¨3Ê¨°„Éù„Éº„É©„É≥„ÉâÂàÜÂâ≤",
                        "„Éù„Éº„É©„É≥„ÉâÂÜçÂª∫",
                        "ÈÄ£Â∏ØÈÅãÂãïÈñãÂßã",
                    ).shuffled()  // üî•„Åì„Åì„Åß„É©„É≥„ÉÄ„É†Âåñüî•
                )
            }

            // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÁä∂ÊÖã„ÇíÁÆ°ÁêÜ
            var showDialog by remember { mutableStateOf(false) }
            var dialogMessage by remember { mutableStateOf("") }

            // ‰∏¶„ÅπÊõø„ÅàÁî®„ÅÆÁä∂ÊÖã
            val lazyListState = rememberLazyListState()
            val reorderableLazyListState =
                rememberReorderableLazyListState(lazyListState) { from, to ->
                    events = events.toMutableList().apply {
                        add(to.index, removeAt(from.index))
                    }
                }

            Box(
                modifier = Modifier
                    .fillMaxSize()
            ) {

                Row(modifier = Modifier.fillMaxSize()) {
                    // Âπ¥Âè∑„É™„Çπ„ÉàÔºàÂõ∫ÂÆöÔºâ
                    LazyColumn(
                        modifier = Modifier
                            .weight(0.22f)
                            .fillMaxHeight()
                            .padding(8.dp),
                        contentPadding = PaddingValues(8.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        items(years) { year ->
                            Surface(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .height(36.dp),
                                color = Color(0xFF9400d3)
                            ) {
                                Text(
                                    text = "$year",
                                    color = Color.White,
                                    modifier = Modifier
                                        .padding(8.dp)
                                        .fillMaxWidth(),
                                    style = MaterialTheme.typography.titleMedium
                                )
                            }
                        }
                    }

                    // Ê≠¥Âè≤ÁöÑ‰∫ãË±°„É™„Çπ„ÉàÔºà„Éâ„É©„ÉÉ„Ç∞ÔºÜ„Éâ„É≠„ÉÉ„ÉóÂØæÂøúÔºâ
                    LazyColumn(
                        modifier = Modifier
                            .weight(0.7f)
                            .fillMaxHeight()
                            .padding(8.dp),
                        state = lazyListState,
                        contentPadding = PaddingValues(8.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp),
                    ) {
                        items(events, key = { it }) { event ->
                            ReorderableItem(reorderableLazyListState, key = event) { isDragging ->
                                val elevation by animateDpAsState(if (isDragging) 4.dp else 0.dp)

                                Surface(shadowElevation = elevation) {
                                    Row(
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(36.dp)
                                    ) {
                                        Text(event, Modifier.padding(horizontal = 8.dp))
                                        Spacer(modifier = Modifier.weight(1f))
                                        IconButton(
                                            modifier = Modifier.draggableHandle(),
                                            onClick = {},
                                        ) {
                                            Icon(Icons.Rounded.Menu, contentDescription = "Reorder")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // „ÄåÂõûÁ≠îButton„Äç„ÇíÁîªÈù¢„ÅÆ‰∏ã‰∏≠Â§Æ„Å´ÈÖçÁΩÆ
                Button(
                    onClick = {
                        // ÂõûÁ≠î„ÉÅ„Çß„ÉÉ„ÇØ
                        val correctEvents = listOf(
                            "„É°„Ç∑„É•„Ç≥1‰∏ñ„ÅÆÊ¥óÁ§º",
                            "„Éú„É¨„Çπ„ÉØ„Éï1‰∏ñ„ÅÆÂç≥‰Ωç",
                            "„Éî„É£„Çπ„ÉàÊúù„ÅÆÂàÜÂâ≤",
                            "„ÉÜ„É≥„Éó„É´È®éÂ£´Âõ£„Å´„Çà„ÇãÊîØÈÖçÈñãÂßã",
                            "„É§„Ç≤„Ç¶„Ç©Â§ßÂ≠¶ÂâµÁ´ã",
                            "„Ç∞„É´„É≥„É¥„Ç°„É´„Éà„ÅÆÊà¶„ÅÑ",
                            "„É´„Éñ„É™„É≥ÈÄ£Âêà",
                            "„Éñ„É¨„Çπ„Éà„Éª„É™„Éà„Éï„Çπ„ÇØÂÖ¨‰ºöË≠∞",
                            "„Éè„Éà„Éû„É≥„ÅÆÂèç‰π±",
                            "„Ç¶„Ç£„Éº„É≥ÂåÖÂõ≤Êà¶",
                            "Á¨¨1Ê¨°„Éù„Éº„É©„É≥„ÉâÂàÜÂâ≤",
                            "„Éù„Éº„É©„É≥„ÉâÊÜ≤Ê≥ï„ÅÆÂà∂ÂÆö",
                            "Á¨¨3Ê¨°„Éù„Éº„É©„É≥„ÉâÂàÜÂâ≤",
                            "„Éù„Éº„É©„É≥„ÉâÂÜçÂª∫",
                            "ÈÄ£Â∏ØÈÅãÂãïÈñãÂßã",
                        )

                        val results = events.zip(correctEvents) { userAnswer, correctAnswer ->
                            if (userAnswer == correctAnswer) "‚≠ï $userAnswer" else "‚ùå $userAnswer (Ê≠£Ëß£: $correctAnswer)"
                        }

                        val correctCount = results.count { it.startsWith("‚≠ï") }

                        dialogMessage = if (correctCount == years.size) {
                            "ÂÖ®ÂïèÊ≠£Ëß£ÔºÅ üéâ"
                        } else {
                            "${years.size}Âïè‰∏≠${correctCount}ÂïèÊ≠£Ëß£ÔºÅ\n\n" + results.joinToString("\n")
                        }

                        showDialog = true
                    },
                    modifier = Modifier
                        .align(Alignment.BottomCenter)
                        .padding(bottom = 16.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF0000ff))
                ) {
                    Text("ÂõûÁ≠î")
                }
            }

            // ÁµêÊûú„ÇíË°®Á§∫„Åô„Çã„ÉÄ„Ç§„Ç¢„É≠„Ç∞
            if (showDialog) {
                AlertDialog(
                    onDismissRequest = { showDialog = false },
                    confirmButton = {
                        Button(
                            onClick = { showDialog = false },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF808080))
                        ) {
                            Text("Èñâ„Åò„Çã")
                        }
                    },
                    title = { Text("ÁµêÊûúÁô∫Ë°®") },
                    text = { Text(dialogMessage) }
                )
            }
        }
    }
}